// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================
// NextAuth core models
// ==========================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  events        Event[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ==========================
// Application models
// ==========================

model Event {
  id                        String    @id @default(cuid())
  ownerId                   String
  name                      String
  slug                      String    @unique
  description               String?
  accentColor               String?   // hex color
  date                      DateTime?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  isActive                  Boolean   @default(true)

  // Google Drive folders
  driveRootFolderId         String?
  driveUploadsFolderId      String?
  driveApprovedFolderId     String?
  driveOriginalsFolderId    String?
  driveExportsFolderId      String?

  owner User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  media Media[]
  albums Album[]
  wishes Wish[]

  @@index([ownerId])
}

enum MediaStatus {
  PENDING
  APPROVED
  REJECTED
}

model Media {
  id                String       @id @default(cuid())
  eventId           String
  albumId           String?
  driveFileId       String
  fileName          String
  mimeType          String
  sizeBytes         BigInt?
  status            MediaStatus  @default(PENDING)
  createdAt         DateTime     @default(now())
  approvedAt        DateTime?
  uploaderFingerprint String?
  width             Int?
  height            Int?
  durationSeconds   Int?
  checksum          String?
  webViewLink       String?
  thumbnailLink     String?
  featured          Boolean      @default(false)

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  album Album? @relation(fields: [albumId], references: [id], onDelete: SetNull)

  @@index([eventId, albumId, status, createdAt])
}

model Wish {
  id                String    @id @default(cuid())
  eventId           String
  message           String
  name              String?
  deviceFingerprint String?
  createdAt         DateTime  @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId, createdAt])
}

model Album {
  id                   String   @id @default(cuid())
  eventId              String
  name                 String
  slug                 String
  description          String?
  isDefault            Boolean  @default(false)
  coverMediaId         String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Google Drive folders for this album
  driveAlbumFolderId      String?
  driveUploadsFolderId    String?
  driveApprovedFolderId   String?
  driveOriginalsFolderId  String?
  driveExportsFolderId    String?

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  media Media[]

  @@unique([eventId, slug])
  @@index([eventId])
}
